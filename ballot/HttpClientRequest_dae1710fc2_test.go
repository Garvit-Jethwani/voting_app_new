// Test generated by RoostGPT for test go-test using AI Type Open AI and AI Model gpt-4

package main

import (
	"bytes"
	"io"
	"net/http"
	"net/http/httptest"
	"testing"
)

func TestHttpClientRequest_dae1710fc2(t *testing.T) {
	// Test case: Successful GET request
	t.Run("successful GET request", func(t *testing.T) {
		ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			w.WriteHeader(http.StatusOK)
			io.WriteString(w, `{"alive": true}`)
		}))
		defer ts.Close()

		status, body, err := httpClientRequest("GET", ts.URL, "/test", nil)
		if err != nil {
			t.Error("Expected no error, got", err)
		}
		if status != http.StatusOK {
			t.Error("Expected status 200, got", status)
		}
		if string(body) != `{"alive": true}` {
			t.Error("Expected body to be `{"alive": true}`, got", string(body))
		}
	})

	// Test case: Unsuccessful POST request with invalid JSON
	t.Run("unsuccessful POST request with invalid JSON", func(t *testing.T) {
		ts := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			w.WriteHeader(http.StatusBadRequest)
		}))
		defer ts.Close()

		invalidJson := bytes.NewBuffer([]byte(`{"invalid json}`))
		status, _, err := httpClientRequest("POST", ts.URL, "/test", invalidJson)
		if err == nil {
			t.Error("Expected error, got nil")
		}
		if status != http.StatusBadRequest {
			t.Error("Expected status 400, got", status)
		}
	})
}
